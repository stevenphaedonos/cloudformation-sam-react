AWSTemplateFormatVersion: 2010-09-09

Parameters:
  ProjectBucketName:
    Type: String
  Domain:
    Type: String
  GitOwner:
    Type: String
  GitRepo:
    Type: String
  GitBranch:
    Type: String
  AcmCertificateArn:
    Type: String

Resources:
  ProjectBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref ProjectBucketName

  UnauthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-unauthenticated-role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: ["sts:AssumeRole"]
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: unauthenticated
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-unauthenticated-policy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - mobileanalytics:PutEvents
                  - cognito-sync:*
                Resource: "*"
  AuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-authenticated-role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: ["sts:AssumeRoleWithWebIdentity"]
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-authenticated-policy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - mobileanalytics:PutEvents
                  - cognito-sync:*
                  - cognito-identity:*
                Resource: "*"

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${AWS::StackName}-user-pool"
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub "${AWS::StackName}-client"
      UserPoolId: !Ref UserPool
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub "${AWS::StackName}-identity-pool"
      AllowUnauthenticatedIdentities: False
      CognitoIdentityProviders:
        - ProviderName: !GetAtt UserPool.ProviderName
          ClientId: !Ref UserPoolClient
  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        "authenticated": !GetAtt AuthenticatedRole.Arn
        "unauthenticated": !GetAtt UnauthenticatedRole.Arn
  AdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: admin
      UserPoolId: !Ref UserPool

  DeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-deployment-role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
                - codepipeline.amazonaws.com
            Action: ["sts:AssumeRole"]
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-deployment-policy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: s3:*
                Resource:
                  - !GetAtt ProjectBucket.Arn
                  - !Sub
                    - "${BucketArn}/*"
                    - BucketArn: !GetAtt ProjectBucket.Arn
              - Effect: Allow
                Action:
                  - codebuild:*
                  - logs:*
                  - cloudformation:*
                  - cloudfront:*
                  - iam:*
                  - lambda:*
                  - apigateway:*
                  - route53:*
                  - acm:*
                Resource: "*"
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref ProjectBucket
      Name: !Sub "${AWS::StackName}-deployment-pipeline"
      RoleArn: !GetAtt DeploymentRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: !Ref GitOwner
                Repo: !Ref GitRepo
                Branch: !Ref GitBranch
                OAuthToken: "{{resolve:secretsmanager:GITHUB_TOKEN}}"
              OutputArtifacts:
                - Name: source
        - Name: Stage
          Actions:
            - Name: Frontend
              InputArtifacts:
                - Name: source
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref CodeBuildFrontendStage
            - Name: Backend
              InputArtifacts:
                - Name: source
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref CodeBuildBackendStage
  CodeBuildFrontendStage:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${AWS::StackName}-frontend-stage"
      ServiceRole: !GetAtt DeploymentRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: pipeline/frontend.yml
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        EnvironmentVariables:
          - Name: project_bucket
            Value: !Ref ProjectBucket
          - Name: cloudfront_distro
            Value: !Ref FrontendStage
          - Name: stage
            Value: stage
          - Name: REACT_APP_REGION
            Value: !Ref AWS::Region
          - Name: REACT_APP_USER_POOL_ID
            Value: !Ref UserPool
          - Name: REACT_APP_USER_POOL_CLIENT
            Value: !Ref UserPoolClient
          - Name: REACT_APP_IDENTITY_POOL_ID
            Value: !Ref IdentityPool
          - Name: REACT_APP_BACKEND_URL
            Value: !Sub
              - "https://api.stage.${Domain}"
              - Domain: !Ref Domain
  CodeBuildBackendStage:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${AWS::StackName}-backend-stage"
      ServiceRole: !GetAtt DeploymentRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: pipeline/backend.yml
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        EnvironmentVariables:
          - Name: api_stack_name
            Value: !Sub "${AWS::StackName}-api"
          - Name: project_bucket
            Value: !Ref ProjectBucket
          - Name: stage
            Value: stage
          - Name: frontend_url
            Value: !Sub
              - "https://stage.${Domain}"
              - Domain: !Ref Domain
          - Name: backend_domain
            Value: !Sub
              - "api.stage.${Domain}"
              - Domain: !Ref Domain
          - Name: acm_certificate_arn
            Value: !Ref AcmCertificateArn
          - Name: user_pool_arn
            Value: !GetAtt UserPool.Arn

  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "${AWS::StackName}-access-identity"
  FrontendStage:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Sub
            - "stage.${Domain}"
            - Domain: !Ref Domain
        DefaultCacheBehavior:
          AllowedMethods: ["GET", "HEAD"]
          CachedMethods: ["GET", "HEAD"]
          TargetOriginId: !Ref ProjectBucket
          ForwardedValues:
            QueryString: False
            Headers:
              - Origin
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
          MinTTL: 0
          DefaultTTL: 3600
          MaxTTL: 86400
          Compress: True
        CustomErrorResponses:
          - ErrorCachingMinTTL: 300
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCachingMinTTL: 300
            ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        DefaultRootObject: index.html
        Enabled: True
        IPV6Enabled: True
        Origins:
          - DomainName: !GetAtt ProjectBucket.DomainName
            Id: !Ref ProjectBucket
            OriginPath: /frontend/stage
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${OriginAccessIdentity}"
        Restrictions:
          GeoRestriction:
            RestrictionType: none
        ViewerCertificate:
          AcmCertificateArn: !Ref AcmCertificateArn
          SslSupportMethod: sni-only

Outputs:
  Region:
    Description: "Region"
    Value: !Ref AWS::Region
  ProjectBucket:
    Value: !Ref ProjectBucket
  CognitoUserPoolArn:
    Description: "Cognito User Pool ARN"
    Value: !GetAtt UserPool.Arn
  CognitoUserPoolId:
    Description: "Cognito User Pool Id"
    Value: !Ref UserPool
  CognitoUserPoolClientId:
    Description: "Cognito User Pool Client Id"
    Value: !Ref UserPoolClient
  CognitoIdentityPoolId:
    Description: "Cognito Identity Pool Id"
    Value: !Ref IdentityPool
