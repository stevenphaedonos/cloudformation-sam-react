AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Timeout: 30 # Use the maximum API Gateway timeout
    Runtime: python3.7

Parameters:
  EnvType:
    Type: String
    AllowedValues:
      - dev
      - stage
      - prod
    Default: dev
    ConstraintDescription: must specify dev, stage, or prod.
  FrontendUrl:
    Type: String
  BackendDomain:
    Type: String
  AcmCertificateArn:
    Type: String
  UserPoolArn:
    Type: String

Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      OpenApiVersion: 3.0.1
      StageName: !Ref EnvType
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !Ref UserPoolArn
        AddDefaultAuthorizerToCorsPreflight: False
      Cors:
        AllowOrigin: !Sub
          - "'${FrontendUrl}'"
          - FrontendUrl: !Ref FrontendUrl
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowCredentials: True
  Domain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !Ref AcmCertificateArn
      DomainName: !Ref BackendDomain
      EndpointConfiguration:
        Types: ["EDGE"]
  BasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref Domain
      RestApiId: !Ref Api
      Stage: !Ref EnvType
  GatewayResponseDefault4XX:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: !Sub
          - "'${FrontendUrl}'"
          - FrontendUrl: !Ref FrontendUrl
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      ResponseType: DEFAULT_4XX
      RestApiId: !Ref Api
  GatewayResponseDefault5XX:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: !Sub
          - "'${FrontendUrl}'"
          - FrontendUrl: !Ref FrontendUrl
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      ResponseType: DEFAULT_5XX
      RestApiId: !Ref Api

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-lambda-role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: ["sts:AssumeRole"]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  LambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "${AWS::StackName}-dependencies"
      CompatibleRuntimes:
        - python3.7
      ContentUri: /dependencies
  UserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.user
      CodeUri: ./src
      Layers:
        - !Ref LambdaLayer
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          FRONTEND_URL: !Ref FrontendUrl
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /user
            Method: get
  AdminFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.admin
      CodeUri: ./src
      Layers:
        - !Ref LambdaLayer
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          FRONTEND_URL: !Ref FrontendUrl
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /admin
            Method: get

Outputs:
  Region:
    Description: Region
    Value: !Ref AWS::Region
  ApiId:
    Description: API ID
    Value: !Ref Api
  ApiDomainAlias:
    Description: The CloudFront distribution domain for the API custom domain name
    Value: !GetAtt Domain.DistributionDomainName
